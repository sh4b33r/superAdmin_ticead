// final List<String> items = [
//   'Item1',
//   'Item2',
//   'Item3',
//   'Item4',
//   'Item5',
//   'Item6',
//   'Item7',
//   'Item8',
// ];
// String? selectedValue;

// @override
// Widget build(BuildContext context) {
//   return Scaffold(
//     body: Center(
//       child: DropdownButtonHideUnderline(
//         child: DropdownButton2<String>(
//           isExpanded: true,
//           hint: const Row(
//             children: [
//               Icon(
//                 Icons.list,
//                 size: 16,
//                 color: Colors.yellow,
//               ),
//               SizedBox(
//                 width: 4,
//               ),
//               Expanded(
//                 child: Text(
//                   'Select Item',
//                   style: TextStyle(
//                     fontSize: 14,
//                     fontWeight: FontWeight.bold,
//                     color: Colors.yellow,
//                   ),
//                   overflow: TextOverflow.ellipsis,
//                 ),
//               ),
//             ],
//           ),
//           items: items
//               .map((String item) => DropdownMenuItem<String>(
//                     value: item,
//                     child: Text(
//                       item,
//                       style: const TextStyle(
//                         fontSize: 14,
//                         fontWeight: FontWeight.bold,
//                         color: Colors.white,
//                       ),
//                       overflow: TextOverflow.ellipsis,
//                     ),
//                   ))
//               .toList(),
//           value: selectedValue,
//           onChanged: (value) {
//             setState(() {
//               selectedValue = value;
//             });
//           },
//           buttonStyleData: ButtonStyleData(
//             height: 50,
//             width: 160,
//             padding: const EdgeInsets.only(left: 14, right: 14),
//             decoration: BoxDecoration(
//               borderRadius: BorderRadius.circular(14),
//               border: Border.all(
//                 color: Colors.black26,
//               ),
//               color: Colors.redAccent,
//             ),
//             elevation: 2,
//           ),
//           iconStyleData: const IconStyleData(
//             icon: Icon(
//               Icons.arrow_forward_ios_outlined,
//             ),
//             iconSize: 14,
//             iconEnabledColor: Colors.yellow,
//             iconDisabledColor: Colors.grey,
//           ),
//           dropdownStyleData: DropdownStyleData(
//             maxHeight: 200,
//             width: 200,
//             decoration: BoxDecoration(
//               borderRadius: BorderRadius.circular(14),
//               color: Colors.redAccent,
//             ),
//             offset: const Offset(-20, 0),
//             scrollbarTheme: ScrollbarThemeData(
//               radius: const Radius.circular(40),
//               thickness: MaterialStateProperty.all(6),
//               thumbVisibility: MaterialStateProperty.all(true),
//             ),
//           ),
//           menuItemStyleData: const MenuItemStyleData(
//             height: 40,
//             padding: EdgeInsets.only(left: 14, right: 14),
//           ),
//         ),
//       ),
//     ),
//   );
// }

import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:get/get.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:superadmin_ticead/model/movie_model/movie_model.dart';
import 'package:superadmin_ticead/view/addscreen/add_screen.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(backgroundColor: Colors.amber),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          Get.to(() => const AddScreen());
        },
        label: Text("Add Movie"),
      ),
      body: Column(
        children: [
          StreamBuilder(
            stream: FirebaseFirestore.instance.collection('Movie').snapshots(),
            builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
              return Expanded(
                child: SlidableAutoCloseBehavior(
                  closeWhenOpened: true,
                  child: ListView.builder(
                    itemCount: snapshot.data!.docs.length,
                    itemBuilder: (context, index) {
                      return Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Slidable(
                          key: ValueKey(index), // Use a unique key for each item
                          startActionPane: ActionPane(
                            motion: ScrollMotion(),
                            children: [
                              SlidableAction(
                                flex: 1,
                                onPressed: () {
                                  // Store the deleted item's data temporarily
                                  Map<String, dynamic> deletedItemData =
                                      snapshot.data!.docs[index].data() as Map<String, dynamic>;

                                  // Show an alert dialog
                                  Get.defaultDialog(
                                    title: 'Delete Item',
                                    content: Text("Are you sure you want to delete this item?"),
                                    actions: [
                                      TextButton(
                                        onPressed: () {
                                          // User pressed "Yes" in the alert dialog, proceed with deletion
                                          // Implement your deletion logic here
                                          FirebaseFirestore.instance
                                              .collection('Movie')
                                              .doc(snapshot.data!.docs[index].id)
                                              .delete();

                                          // Close the alert dialog
                                          Get.back();
                                        },
                                        child: Text('Yes'),
                                      ),
                                      TextButton(
                                        onPressed: () {
                                          // User pressed "No" in the alert dialog, restore the deleted item's data
                                          // Implement your restoration logic here
                                          // You can add the item back to the Firestore collection

                                          // Close the alert dialog
                                          Get.back();
                                        },
                                        child: Text('No'),
                                      ),
                                    ],
                                  );
                                },
                                backgroundColor: Color(0xFFFE4A49),
                                foregroundColor: Colors.white,
                                icon: Icons.delete,
                                label: 'Delete',
                              ),
                            ],
                          ),
                          child: Container(
                            color: Colors.amberAccent,
                            height: 100,
                            width: MediaQuery.of(context).size.width,
                            child: Text(snapshot.data!.docs[index]['name']),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
